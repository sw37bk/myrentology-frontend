const BOT_TOKEN = process.env.BOT_TOKEN || '7525839831:AAFQIY1dUran8yIfx3SS1C4dKNt4sshOmu0';
const BOT_USERNAME = process.env.BOT_USERNAME || 'rentology_bot';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è production –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
const linkTokens = new Map();
const telegramUsers = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
function generateLinkToken() {
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId, text) {
  await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text })
  });
}

export default async function handler(req, res) {
  const { method } = req;
  
  // Webhook –æ—Ç Telegram
  if (method === 'POST' && req.body.message) {
    try {
      const update = req.body;
      const message = update.message;
      const chatId = message.chat.id;
      const text = message.text;
      const user = message.from;
      
      if (text?.startsWith('/start')) {
        const token = text.split(' ')[1];
        
        if (token) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
          const linkData = linkTokens.get(token);
          
          if (!linkData) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –æ–± –æ—à–∏–±–∫–µ
            try {
              await fetch(`${req.headers.origin || 'https://rental-crm-frontend-47ay0w9sz-sw37bks-projects.vercel.app'}/api/telegram-link-callback`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ success: false, error: 'invalid_token' })
              });
            } catch (e) {}
            return await sendTelegramMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω —Å–≤—è–∑—ã–≤–∞–Ω–∏—è');
          }
          
          if (linkData.expires < Date.now()) {
            linkTokens.delete(token);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –æ–± –æ—à–∏–±–∫–µ
            try {
              await fetch(`${req.headers.origin || 'https://rental-crm-frontend-47ay0w9sz-sw37bks-projects.vercel.app'}/api/telegram-link-callback`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ success: false, error: 'token_expired' })
              });
            } catch (e) {}
            return await sendTelegramMessage(chatId, '‚ùå –¢–æ–∫–µ–Ω —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞ —Å–∞–π—Ç–µ');
          }
          
          // –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
          telegramUsers.set(chatId.toString(), {
            userId: linkData.userId,
            username: linkData.username,
            phone: linkData.phone,
            telegramUsername: user.username,
            firstName: user.first_name
          });
          
          linkTokens.delete(token);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –Ω–∞ —Å–∞–π—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏
          try {
            await fetch(`${req.headers.origin || 'https://rental-crm-frontend-47ay0w9sz-sw37bks-projects.vercel.app'}/api/telegram-link-callback`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                success: true,
                userId: linkData.userId,
                telegramId: chatId.toString(),
                username: linkData.username,
                phone: linkData.phone,
                telegramUsername: user.username,
                firstName: user.first_name
              })
            });
          } catch (e) {}
          
          await sendTelegramMessage(chatId, `‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –†–µ–Ω—Ç–æ–ª–æ–≥–∏—è!

üîó –°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:
${user.username ? `Telegram: @${user.username}` : `–ò–º—è: ${user.first_name}`}
–°–∞–π—Ç: ID ${linkData.userId}

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ù–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
‚Ä¢ –û—Ç–º–µ–Ω–∞—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —á–∞—Ç–∞—Ö`);
        } else {
          const userData = telegramUsers.get(chatId.toString());
          if (userData) {
            await sendTelegramMessage(chatId, `‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω (ID: ${userData.userId})`);
          } else {
            await sendTelegramMessage(chatId, `üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–µ–Ω—Ç–æ–ª–æ–≥–∏—è!

‚ùå –î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:
1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ
2. –ù–∞–∂–º–∏—Ç–µ "–°–≤—è–∑–∞—Ç—å Telegram"
3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω`);
          }
        }
      }
      
      return res.status(200).json({ ok: true });
    } catch (error) {
      return res.status(200).json({ ok: false });
    }
  }
  
  // API –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (method === 'POST' && req.url === '/api/telegram?action=link') {
    const { userId, username, phone } = req.body;
    
    const token = generateLinkToken();
    const expires = Date.now() + 10 * 60 * 1000;
    
    linkTokens.set(token, { userId, username, phone, expires });
    
    return res.json({
      success: true,
      token,
      botUrl: `https://t.me/${BOT_USERNAME}?start=${token}`,
      message: `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É: /start ${token}`
    });
  }
  
  // API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  if (method === 'POST' && req.url === '/api/telegram?action=notify') {
    const { userId, message } = req.body;
    
    let telegramId = null;
    for (const [tgId, userData] of telegramUsers.entries()) {
      if (userData.userId === userId) {
        telegramId = tgId;
        break;
      }
    }
    
    if (!telegramId) {
      return res.status(404).json({ error: 'User not linked to Telegram' });
    }
    
    try {
      await sendTelegramMessage(telegramId, message);
      return res.json({ success: true });
    } catch (error) {
      return res.status(500).json({ error: error.message });
    }
  }
  
  // API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  if (method === 'GET' && req.url?.startsWith('/api/telegram?action=status')) {
    const userId = parseInt(req.url.split('userId=')[1]);
    
    for (const [tgId, userData] of telegramUsers.entries()) {
      if (userData.userId === userId) {
        return res.json({
          linked: true,
          telegramId: tgId,
          username: userData.username,
          phone: userData.phone
        });
      }
    }
    
    return res.json({ linked: false });
  }
  
  res.status(404).json({ error: 'Not found' });
}