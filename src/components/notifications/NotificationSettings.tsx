import React, { useState } from 'react';
import { Card, Switch, Button, Input, Form, Space, List, Tag, message } from 'antd';
import { BellOutlined, SendOutlined, UserAddOutlined, ApiOutlined } from '@ant-design/icons';
import { notificationBot } from '../../services/notificationBot';
import { webhookSetup } from '../../services/webhookSetup';
import { useAuthStore } from '../../stores/authStore';

export const NotificationSettings: React.FC = () => {
  const [subscribers, setSubscribers] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [form] = Form.useForm();

  const loadSubscribers = async () => {
    setLoading(true);
    const data = await notificationBot.getSubscribers();
    setSubscribers(data);
    setLoading(false);
  };

  React.useEffect(() => {
    loadSubscribers();
  }, []);

  const sendTestNotification = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ authStore
      const { user } = useAuthStore.getState();
      
      if (!user?.id) {
        message.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à –±–æ—Ç
      const response = await fetch('https://telegram-bot-rydw.onrender.com/api/notify-user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: user.id,
          message: `üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\nüìÖ 15.06.2024 - 17.06.2024\nüöô BMW X5\nüìç —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123\n\nüìû –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: +7 (999) 123-45-67`
        })
      });
      
      if (response.ok) {
        message.success('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      } else {
        const error = await response.json();
        if (response.status === 404) {
          message.error('Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
        } else {
          message.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + (error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      console.error(error);
    }
  };

  return (
    <div>
      <Card title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" style={{ marginBottom: 16 }}>
        <Space direction="vertical" style={{ width: '100%' }}>
          <div>
            <h4>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
            <Space direction="vertical">
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <span>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</span>
                <Switch defaultChecked />
              </div>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <span>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏</span>
                <Switch defaultChecked />
              </div>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <span>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ</span>
                <Switch defaultChecked />
              </div>
            </Space>
          </div>

          <div>
            <h4>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞</h4>
            <Space>
              <Button 
                icon={<ApiOutlined />}
                onClick={async () => {
                  setLoading(true);
                  const result = await webhookSetup.setWebhook();
                  setLoading(false);
                  if (result?.ok) {
                    message.success('–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
                  } else {
                    message.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞');
                  }
                }}
                loading={loading}
              >
                –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫
              </Button>
              <Button 
                type="primary" 
                icon={<SendOutlined />}
                loading={loading}
                onClick={sendTestNotification}
              >
                –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </Button>
            </Space>
          </div>
        </Space>
      </Card>

      <Card 
        title={`–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (${subscribers.length})`}
        extra={
          <Button 
            icon={<UserAddOutlined />}
            onClick={loadSubscribers}
            loading={loading}
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        }
      >
        <List
          dataSource={subscribers}
          renderItem={(user) => (
            <List.Item>
              <List.Item.Meta
                avatar={<BellOutlined style={{ fontSize: 20, color: '#1890ff' }} />}
                title={user.first_name}
                description={
                  <Space>
                    <span>@{user.username || '–±–µ–∑ username'}</span>
                    {user.phone && <span>{user.phone}</span>}
                  </Space>
                }
              />
              <div>
                {user.notifications.map((type: string) => (
                  <Tag key={type} color="blue">
                    {type === 'booking_confirmed' && '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'}
                    {type === 'booking_reminder' && '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'}
                    {type === 'payment_due' && '–û–ø–ª–∞—Ç–∞'}
                  </Tag>
                ))}
              </div>
            </List.Item>
          )}
        />
      </Card>
    </div>
  );
};